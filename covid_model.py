# -*- coding: utf-8 -*-
"""Covid_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZPMvUHNmM3hUojrDnP9qRhyUusrEWjkA
"""

import io
import pandas as pd
from graphviz import Source
from google.colab import files
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.tree import export_graphviz
from matplotlib import pyplot as plt

uploaded = files.upload()
data = pd.read_csv(io.BytesIO(uploaded['formatted_data.csv']))

X = data.iloc[:8192,1:15].copy()
Y = data.iloc[:8192,-1:].copy()

X_train,X_test,y_train,y_test = train_test_split(X, Y, test_size=0.2,
                                                 random_state = 42)

tree_classifier_entropy = DecisionTreeClassifier(criterion='entropy', max_depth=2)
tree_classifier_entropy.fit(X_train,y_train)


export_graphviz(tree_classifier_entropy,out_file=("covid_tree_entropy.dot"),
                feature_names = ['sex','age','pregnancy','diabetes','copd','asthma','inmsupr','hypertension','other_diseaase','cardiovascular','obesity','renal_chronic','tobacco','pneumonia'],
                class_names=['recovered','deceased'],
                filled = True)


Source.from_file("covid_tree_entropy.dot")

y_pred = tree_classifier_entropy.predict(X_test)
accuracy_score(y_test,y_pred)

print(X_train)

classification_data = data.copy()

classification_data['classes'] = classification_data['deceased']

print(classification_data)

for i in range(len(classification_data['classes'])):
 if classification_data['classes'][i] == 1:
   classification_data.loc[i,'classes'] = 'deceased'


for i in range(len(classification_data['classes'])):
 if classification_data['classes'][i] == 0:
   classification_data.loc[i,'classes'] = 'recovered'
print(classification_data)

X_classification = classification_data.iloc[:5000,1:15].copy()

print(X_classification)

Y_classes =  classification_data.iloc[:5000,-1:]
Y_classes = pd.get_dummies(Y_classes)
print(Y_classes)

X_train,X_test,y_train,y_test = train_test_split(X_classification, Y_classes, test_size=0.2,
                                                 random_state = 42)

tree_classifier_entropy = DecisionTreeClassifier(criterion='gini', max_depth=19)
tree_classifier_entropy.fit(X_train,y_train)



export_graphviz(tree_classifier_entropy,out_file=("covid_tree_entropy.dot"),
                feature_names = ['sex','age','pregnancy','diabetes','copd','asthma','inmsupr','hypertension','other_diseaase','cardiovascular','obesity','renal_chronic','tobacco','pneumonia'],
                class_names=['deceased','recovered'],
                filled = True)


Source.from_file("covid_tree_entropy.dot")

y_pred = tree_classifier_entropy.predict(X_test)
accuracy_score(y_test,y_pred)

count = 0
true_id = 0
index =[0] * 1259
for i in range(len(data['deceased'])):
  if data['deceased'][i] == 1:
    count += 1
    index[true_id] = i
    true_id += 1


features = ['sex','age','pregnancy','diabetes','copd','asthma','inmsupr','hypertension','other_diseaase','cardiovascular','obesity','renal_chronic','tobacco','pneumonia']
biased_target = classification_data['classes'][:1113]

biased_target = pd.get_dummies(biased_target)
biased_data = classification_data.iloc[:count,1:15]

for i in range(len(features)):
  for j in range(count):
    biased_data[features[i]][j] = classification_data[features[i]][index[j]]

for i in range(count):
  biased_target['deceased'][i] = 1
  biased_target['recovered'][i] = 0
print(biased_data)

print(biased_target)

y_pred = tree_classifier_entropy.predict(biased_data)
accuracy_score(biased_target,y_pred)

print(y_pred)

params = {'max_leaf_nodes':list(range(2,100)),'min_samples_split':[2,3,4]}
grid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), params, 
                              verbose=1, cv=3)

grid_search_cv.fit(X_train,y_train)
y_pred = grid_search_cv.predict(biased_data)
accuracy_score(biased_target,y_pred)

print(grid_search_cv.best_params_)

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
clf=RandomForestClassifier(n_estimators=100)
clf.fit(X_train,y_train)
y_pred=clf.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

y_pred=clf.predict(biased_data)

print("Accuracy:",metrics.accuracy_score(biased_target, y_pred))

feature_imp = pd.Series(clf.feature_importances_,index=['sex','age','pregnancy','diabetes','copd','asthma','inmsupr','hypertension','other_diseaase','cardiovascular','obesity','renal_chronic','tobacco','pneumonia']).sort_values(ascending=False)
feature_imp

covid_data = files.upload()

data = pd.read_csv(io.BytesIO(covid_data['covid.csv']))

data.head()

data_copy = data.copy()
data_copy.head()

data.shape

data_copy.shape

data_copy = data_copy.drop(columns=['id'])
data_copy.head()

data_copy = data_copy.drop(columns=['entry_date'])
data_copy.head()

data_copy = data_copy.drop(columns='date_symptoms')
data_copy.head()

deceased  = [0]* data_copy.shape[0]
for i in range(data_copy.shape[0]):
  if data_copy['date_died'][i] != "9999-99-99":
    deceased[i] = 1

training_set = data_copy.copy()
training_set['deceased'] = deceased
training_set.head()

training_set.head()
training_set = training_set.drop(columns=['date_died'])

training_set.head()

training_set.shape

training_set.age.hist(bins=25)

training_set.diabetes.value_counts().plot(kind='barh')
plt.show()

training_set.deceased.value_counts().plot(kind='barh')
plt.show()

training_set.sex.value_counts().plot(kind='barh')
plt.show()

training_set.asthma.value_counts().plot(kind='barh')
plt.show()

training_set.describe()

X = training_set.iloc[:,:19].copy()
X.head()

Y = training_set.iloc[:,-1]
Y.head()

Y.shape

X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size=0.3,
                                                 random_state = 42)

X_test.head()

params = {'max_leaf_nodes':list(range(2,100)),'min_samples_split':[2,3,4]}
grid_search_cv = GridSearchCV(DecisionTreeClassifier(criterion='entropy',random_state=42), params, 
                              verbose=1, cv=3)

grid_search_cv.fit(X_train,Y_train)

predictions = grid_search_cv.predict(X_test)
accuracy_score(predictions,Y_test)

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
clf=RandomForestClassifier(n_estimators=1000)
clf.fit(X_train,Y_train)

y_pred=clf.predict(X_test)

print("Accuracy:",metrics.accuracy_score(Y_test, y_pred))

feature_imp = pd.Series(clf.feature_importances_,index=['sex','patient_type','intubed','pneumonia','age','pregnancy','diabetes','copd','asthma','inmsupr','hypertension','other_diseaase','cardiovascular','obesity','renal_chronic','tobacco','contact_other_covid','covid_res','icu']).sort_values(ascending=False)
feature_imp

import joblib
# Save model
#joblib.dump(clf, "./random_forest.joblib",compress=3)
joblib.dump(clf, 'model.pkl')

model = files.upload()

loaded_model = joblib.load('random_forest.joblib')

y_pred=loaded_model.predict(X_test)
print("Accuracy:",metrics.accuracy_score(Y_test, y_pred))

y_pred=loaded_model.predict(X_test.iloc[100:101,:])
print("Accuracy:",metrics.accuracy_score(Y_test.iloc[100:101], y_pred))

print(Y_test.iloc[100:101])

print(y_pred)